@test(#dn, ())
with Seq(0..10, _) def main() = {
//# undefined variable `missing`
    alt #dn (1, (#x, #y), missing) {
//                        ^^^^^^^ not found
        _ => { }

        (a, b, c) => {}

//# too many positional arguments passed
        (_, _) => {}
//           ^ 1 unexpected positional arguments not matched

//# too few positional arguments passed
        (_, _, _, _, _) => {}
//                ^^^^ expected 2 more positional arguments not passed

//# invalid item not matched
        (1, 2, 3) => {}
//          ^ found `(#x, #y)`, incompatible with pattern

//# type error
        (#a, _, _) => {}
//       ^^ `#a` does not match type `1`

//# invalid item not matched
        "foo" => {}
//      ^^^^^ found `(1, (#x, #y), <error>)`, incompatible with pattern

//# expected type `1`
        ([x, y], _, _) => {}
//       ^^^^^^ can't destructure into vector of width 2
    }
}

@test(#up, ())
with Seq(0..10, _) def main() = {
    //# undefined variable `missing`
    alt #up (_, missing) {
//              ^^^^^^^ not found

//# no value for up-direction variable provided
//# no value for up-direction variable provided
        (a, b) => { val(1) }
//          ^ must be up-evaluated exactly once in this block
//       ^ must be up-evaluated exactly once in this block

        (#x, #y) => { val(2) }

//# expression type not supported as a pattern
        (_, #x) => { val(3) }
//       ^ not allowed here

//# expected type `_`
        ([x, y], #x) => { val(4) }
//       ^^^^^^ can't destructure into vector of width 2
    }
}


@test(#up, ())
with Seq(0..10, _) def main() = {
//# `alt` action must have at least one arm
    alt #up #foo {}
//  ^^^^^^^^^^^^^^^ no arms specified

//# `alt` action must have at least one arm
    alt #dn #foo {}
//  ^^^^^^^^^^^^^^^ no arms specified
}

@test(#dn, ())
with Seq(0..10, _) def main() = {
//# expected a single value
    alt #dn "foo" {
//          ^^^^^ found `"foo"`
        _ => {}
    }

//# expression cannot be evaluated as a value
    alt #dn _ {
//          ^ found `_`
        _ => {}
    }
}

@test(#up, ())
with Seq(0..10, _) def main() = {
//# expected a single value
    alt #up "foo" {
//          ^^^^^ found `"foo"`
        #x => {}
    }
}

@test(#up, ())
with Seq(0..10, _) def main() = {
//# no arms matched constant alt
//# expected constant value
    alt #const 0..10 {
//  ^- all patterns failed to match
        #x => {}
//      ^^ found `0..10`
    }
}
