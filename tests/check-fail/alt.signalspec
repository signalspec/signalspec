@test(#dn, ())
with Seq(0..10, _) def main() = seq {
//# undefined variable `missing`
    alt #dn missing {
//          ^^^^^^^ not found
        _ => { }

        1 => {}
    }

    alt #dn 1 {
//# type error
        #a => {}
//      ^^ `#a` does not match type `1`

//# expression type not supported as a pattern
        "foo" => {}
//      ^^^^^ not allowed here

//# expected type `1`
        [x, y] => {}
//      ^^^^^^ can't destructure into vector of width 2
    }
}

@test(#up, ())
with Seq(0..10, _) def main() = seq {
//# undefined variable `missing`
    alt #up missing {
//          ^^^^^^^ not found
        1 => {}
    }

    alt #up _ {
//# no value for up-direction variable provided
        a => { val(1) }
//      ^ must be up-evaluated exactly once in this block

//# expression type not supported as a pattern
        _ => {}
//      ^ not allowed here

//# expected type `_`
        [x, y] => { val(4) }
//      ^^^^^^ can't destructure into vector of width 2
    }

    alt #up [_, _] {
//# no value for up-direction variable provided
//# no value for up-direction variable provided
        [a, b] => { val(1) }
//          ^ must be up-evaluated exactly once in this block
//       ^ must be up-evaluated exactly once in this block
    }
}


@test(#up, ())
with Seq(0..10, _) def main() = seq {
//# `alt` action must have at least one arm
    alt #up #foo {}
//  ^^^^^^^^^^^^^^^ no arms specified

//# `alt` action must have at least one arm
    alt #dn #foo {}
//  ^^^^^^^^^^^^^^^ no arms specified
}

@test(#dn, ())
with Seq(0..10, _) def main() = seq {
//# expected a single value
    alt #dn "foo" {
//          ^^^^^ found `"foo"`
        _ => {}
    }

//# expression cannot be evaluated as a value
    alt #dn _ {
//          ^ found `_`
        _ => {}
    }
}

@test(#up, ())
with Seq(0..10, _) def main() = seq {
//# expected a single value
    alt #up "foo" {
//          ^^^^^ found `"foo"`
        #x => {}
    }
}

@test(#up, ())
with Seq(0..10, _) def main() = seq {
//# no arms matched constant alt
//# expected constant value
    alt #const 0..10 {
//  ^- all patterns failed to match
        #x => {}
//      ^^ found `0..10`
    }
}
