with Seq(_:#a|#b, _)
def bare() = {
    alt #up () {
        () => {
            val(#a)
        }
        () => {
            val(#b)
        }
    }
}

@test(#up, (#a))
with Seq(_:#a|#b, _) def test1() = {
    bare()
}

with Seq(_:#a|#b, _)
def constant() = {
    alt #const #b {
        #a => {
            val(#a)
        }
        #b => {
            val(#b)
        }
        #c => {
            val(#c)
        }
    }
}

@test(#both, (#b))
with Seq(_:#a|#b, _) def test_constant() = {
    constant()
}

with Seq(_:#a|#b, _)
def constant_destructure() = {
    alt #const (#a, [#b, #c, #d, #e]) {
        (#a, [x, 2:[#c, #d], #e]) => {
            val(x)
        }
    }
}

@test(#both, (#b))
with Seq(_:#a|#b, _) def test_constant_destructure() = {
    constant_destructure()
}

with Seq(_:#a|#b, dir)
def simple() = new Seq(#a | #b, dir) {
    on val(x) {
        alt dir x {
            #a => {
                val(#a)
                val(#b)
            }
            #b => {
                val(#b)
                val(#a)
            }
        }
    }
}

@test(#both, (#b, #a))
with Seq(_:#a|#b, _) def test2() = {
    simple() | { val(#b) }
}

@test(#both, (#a, #b))
with Seq(_:#a|#b, _) def test2() = {
    simple() | { val(#a) }
}

with Seq(_:#a|#b|#x|#y, dir)
def tuple() = new Seq((#a|#b, #a|#b|#x|#y), dir) {
    on val(z) {
        alt dir z {
            (#a, w) => {
                val(#a)
                val(w)
            }
            (#b, w) => {
                val(#b)
                val(w)
            }
        }
    }
}

@test(#both, (#b, #x))
with Seq(_:#a|#b|#x|#y, _) def test_tuple() = {
    tuple() | { val((#b, #x)) }
}

with Seq(_:#a|#b, dir)
def ambiguous() = new Seq(#a | #b, dir) {
    on val(x) {
        alt dir x {
            #b => {
                val(#a)
                val(#b)
                val(#a)
            }
            #a => {
                val(#a)
                val(#a)
                val(#b)
            }
        }
    }
}

// test seq_both(#a|#b, (#a, #b, #a)) | ambiguous() | { val(#b) };
// test seq_both(#a|#b, (#a, #a, #b)) | ambiguous() | { val(#a) };
// test fail seq_both(#a|#b, (#a, #b, #a)) | ambiguous() | { val(#a) };

with Seq((_:#ones|#bit|#two, _:bits(2)), dir)
def vector_map() = new Seq(bits(4), dir) {
    repeat {
        on val(x) {
            alt dir x {
                '1111 => { val((#ones, '00)) }
                [1, 1, 0, x] => { val((#bit, [0, x])) }
                [2:'00, 2:x] => { val((#two, x)) }
            }
        }
    }
}

@test(#both, ((#ones, '00), (#bit, '01), (#two, '10)))
with Seq((_:#ones|#bit|#two, _:bits(2)), dir) def vector() = vector_map() | { val('1111); val('1101); val('0010) }
