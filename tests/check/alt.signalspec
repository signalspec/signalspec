
with #a|#b
def bare() {
    alt _ {
        _ => {
            #a
        }
        _ => {
            #b
        }
    }
}

test @up(#a|#b) { #a } bare();

with #a|#b
def simple(): #a | #b {
    on x {
        alt x {
            #a => {
                #a
                #b
            }
            #b => {
                #b
                #a
            }
        }
    }
}

test @both(#a|#b) { #b; #a } simple() { #b };
test @both(#a|#b) { #a; #b } simple() { #a };

with #a|#b|#x|#y
def tuple(): (#a|#b, #a|#b|#x|#y) {
    on z {
        alt z {
            (#a, w) => {
                #a
                w
            }
            (#b, w) => {
                #b
                w
            }
        }
    }
}

test @both(#a|#b|#x|#y) { #b; #x } tuple() { (#b, #x) };

with #a|#b
def ambiguous(): #a | #b {
    on x {
        alt x {
            #b => {
                #a
                #b
                #a
            }
            #a => {
                #a
                #a
                #b
            }
        }
    }
}

test @both(#a|#b) { #a; #b; #a } ambiguous() { #b };
test @both(#a|#b) { #a; #a; #b } ambiguous() { #a };
test fail @both(#a|#b) { #a; #a; #a } ambiguous() { #a };
