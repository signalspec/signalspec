with Seq(#a|#b, _)
def bare() = {
    alt #up _ {
        _ => {
            val(#a)
        }
        _ => {
            val(#b)
        }
    }
}

@test(#up, (#a))
with Seq(#a | #b, _) def test1() = {
    bare()
}

with Seq(#a|#b, dir)
def simple() = ^Seq(#a | #b, dir) {
    on val(x) {
        alt dir x {
            #a => {
                val(#a)
                val(#b)
            }
            #b => {
                val(#b)
                val(#a)
            }
        }
    }
}

@test(#both, (#b, #a))
with Seq(#a|#b, _) def test2() = {
    simple() | { val(#b) }
}

@test(#both, (#a, #b))
with Seq(#a|#b, _) def test2() = {
    simple() | { val(#a) }
}

with Seq(#a|#b|#x|#y, dir)
def tuple() = ^Seq((#a|#b, #a|#b|#x|#y), dir) {
    on val(z) {
        alt dir z {
            (#a, w) => {
                val(#a)
                val(w)
            }
            (#b, w) => {
                val(#b)
                val(w)
            }
        }
    }
}

@test(#both, (#b, #x))
with Seq(#a|#b|#x|#y, _) def test_tuple() = {
    tuple() | { val((#b, #x)) }
}

with Seq(#a|#b, dir)
def ambiguous() = ^Seq(#a | #b, dir) {
    on val(x) {
        alt dir x {
            #b => {
                val(#a)
                val(#b)
                val(#a)
            }
            #a => {
                val(#a)
                val(#a)
                val(#b)
            }
        }
    }
}

// test seq_both(#a|#b, (#a, #b, #a)) | ambiguous() | { val(#b) };
// test seq_both(#a|#b, (#a, #a, #b)) | ambiguous() | { val(#a) };
// test fail seq_both(#a|#b, (#a, #b, #a)) | ambiguous() | { val(#a) };
