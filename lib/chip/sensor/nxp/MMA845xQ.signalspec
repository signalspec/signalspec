let ADDR = '0011101

// https://www.nxp.com/docs/en/data-sheet/MMA8451Q.pdf
// https://www.nxp.com/docs/en/data-sheet/MMA8452Q.pdf
// https://www.nxp.com/docs/en/data-sheet/MMA8453Q.pdf

let OUT_X_MSB = 'h01
let XYZ_DATA_CFG = 'h0E
let WHO_AM_I = 'h0D
let CTRL_REG1 = 'h2A
let CTRL_REG4 = 'h2D

with I2C(role)
def read_reg(reg, val) = {
    transaction() | {
        start(ADDR, #w)
        write(reg)
        start(ADDR, #r)
        read(val)
    }
}

with I2C(role)
def write_reg(reg, val) = {
    transaction() | {
        start(ADDR, #w)
        write(reg)
        write(val)
    }
}

with I2C(role)
def MMA845xQ() = new Seq((-4.0..4.0, -4.0..4.0, -4.0..4.0), #up) {
    read_reg(WHO_AM_I, <:'h2a);
    write_reg(CTRL_REG1, 'h31);
    write_reg(XYZ_DATA_CFG, 'h00);
    write_reg(CTRL_REG4, 'h01);
    repeat #dn 100000 {
        on val((x, y, z)) {
            transaction() | {
                start(ADDR, #w);
                write(OUT_X_MSB);
                start(ADDR, #r);

                for b = chunks(8, signed(16, x * 16384.0)) {
                    read(b)
                }

                for b = chunks(8, signed(16, y * 16384.0)) {
                    read(b)
                }

                for b = chunks(8, signed(16, z * 16384.0)) {
                    read(b)
                }
            }
        }
    }
}

