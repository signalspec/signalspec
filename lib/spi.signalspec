let bit = 0|1
let byte = [bit, bit, bit, bit, bit, bit, bit, bit]

protocol SPI(dir) dir {
  data(var(dir) byte),
  start(),
  end(),
}

with Seq((#l|#h, #l|#h, #l|#h), dir)
def spi() = SPI(dir) {
  repeat dir <: 10 { val((#h, <: #l, <: #l)) }
  repeat {
    on start() {}
    repeat {
      on data(byte) {
        for bit=byte {
          let b = bit[0=#l, 1=#h]
          val((#l, #l, <: b))
          repeat dir <: 4 { val((#l, #l, <: b)) }
          val((#l, #h, b))
          repeat dir <: 4 { val((#l, #h, <: b)) }
        }
      }
    }
    on end() {}
    val((#h, <: #l, <: #l))
    repeat dir <: 9 { val((#h, <: #l, <: #l)) }
  }
}

test roundtrip((#l|#h, #l|#h, #l|#h)) | spi() | { start(); data('01011101); data('11110000); end(); start(); data('00001000); end() };
